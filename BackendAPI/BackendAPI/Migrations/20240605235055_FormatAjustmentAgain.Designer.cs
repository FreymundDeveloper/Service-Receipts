// <auto-generated />
using System;
using BackendAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BackendAPI.Migrations
{
    [DbContext(typeof(BackendAPIContext))]
    [Migration("20240605235055_FormatAjustmentAgain")]
    partial class FormatAjustmentAgain
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.6");

            modelBuilder.Entity("BackendAPI.Models.Historic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ServiceDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("ServiceType")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Historicals");
                });

            modelBuilder.Entity("BackendAPI.Models.Receipt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("AmountCharged")
                        .HasColumnType("REAL");

                    b.Property<double>("Cost")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("Receipts");
                });

            modelBuilder.Entity("BackendAPI.Models.Receipt", b =>
                {
                    b.HasOne("BackendAPI.Models.Historic", "Historic")
                        .WithOne("Receipt")
                        .HasForeignKey("BackendAPI.Models.Receipt", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Historic");
                });

            modelBuilder.Entity("BackendAPI.Models.Historic", b =>
                {
                    b.Navigation("Receipt")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
